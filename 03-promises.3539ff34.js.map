{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,uBAClCC,UAAWF,SAASC,cAAc,sBAClCE,MAAOH,SAASC,cAAc,wBAC9BG,SAAUJ,SAASC,cAAc,WAE/BI,EAAW,GAEf,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCH,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,aAmCzBV,EAAKM,SAASU,iBAAiB,SA9B/B,SAAoBC,GAClBA,EAAMC,iBAKN,IAJA,IAAMC,EAAoBC,OAAOpB,EAAKK,MAAMgB,OACtCC,EAAYF,OAAOpB,EAAKC,UAAUoB,OAClCE,EAAOH,OAAOpB,EAAKI,UAAUiB,OAC/BG,EAAQF,EACHG,EAAQ,EAAGA,EAAQN,EAAoB,EAAGM,GAAS,EAAG,CAC7D,IAAMC,EAAalB,EAAciB,EAAOD,GACxCA,GAASD,EACThB,EAASoB,KAAKD,GAEhBE,YAAW,WACTrB,EAASsB,KAAI,SAAAC,GACXF,YAAW,WACTE,EAAEC,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,M,OAClBuB,EAAAnC,GAASoC,OAAOC,QACd,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,UAG/C2B,OAAM,SAAAL,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,M,OAClBuB,EAAAnC,GAASoC,OAAOI,QACd,sBAAqCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,UAG9C6B,SAAQ,SAAAC,G,OAAMjC,EAAW,QAC3BgB,QAEJD,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  mianDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  count: document.querySelector('input[name=\"amount\"]'),\n  startBtn: document.querySelector('button'),\n};\nlet promises = [];\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n\nfunction onSubmited(event) {\n  event.preventDefault();\n  const countOfIterations = Number(refs.count.value);\n  const mainDelay = Number(refs.mianDelay.value);\n  const step = Number(refs.delayStep.value);\n  let delay = mainDelay;\n  for (let index = 1; index < countOfIterations + 1; index += 1) {\n    const newPromise = createPromise(index, delay);\n    delay += step;\n    promises.push(newPromise);\n  }\n  setTimeout(() => {\n    promises.map(p => {\n      setTimeout(() => {\n        p.then(({ position, delay }) =>\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          )\n        )\n          .catch(({ position, delay }) =>\n            Notiflix.Notify.failure(\n              `❌ Rejected promise ${position} in ${delay}ms`\n            )\n          )\n          .finally(x => (promises = []));\n      }, step);\n    });\n  }, mainDelay);\n}\n\nrefs.startBtn.addEventListener('click', onSubmited);\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","mianDelay","document","querySelector","delayStep","count","startBtn","$ce04d3a99e08e73b$var$promises","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","Math","random","addEventListener","event","preventDefault","countOfIterations","Number","value","mainDelay","step","delay1","index","newPromise","push","setTimeout","map","p","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","finally","x"],"version":3,"file":"03-promises.3539ff34.js.map"}